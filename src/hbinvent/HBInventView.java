/*
 * HBInventView.java
 */

package hbinvent;

import business.Branch;
import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.NumberFormat;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 * The application's main frame.
 */
public class HBInventView extends FrameView {
    private boolean loading = false;

    public HBInventView(SingleFrameApplication app) { //constructor
        super(app);

        initComponents();
        jTable1.setName(null);
        DefaultTableModel m = new DefaultTableModel();
        jTable1.setModel(m);

        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                    progressBar.setVisible(false);
                    progressBar.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String)(evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer)(evt.getNewValue());
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(false);
                    progressBar.setValue(value);
                }
            }
        });
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = HBInventApp.getApplication().getMainFrame();
            aboutBox = new HBInventAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        HBInventApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jcmbBranch = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jbtnClear = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        jmnuOpen = new javax.swing.JMenuItem();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();

        mainPanel.setName("mainPanel"); // NOI18N

        jcmbBranch.setEnabled(false);
        jcmbBranch.setName("jcmbBranch"); // NOI18N
        jcmbBranch.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcmbBranchItemStateChanged(evt);
            }
        });

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(hbinvent.HBInventApp.class).getContext().getResourceMap(HBInventView.class);
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setEnabled(false);
        jTable1.setName("jTable1"); // NOI18N
        jScrollPane1.setViewportView(jTable1);

        jbtnClear.setText(resourceMap.getString("jbtnClear.text")); // NOI18N
        jbtnClear.setName("jbtnClear"); // NOI18N
        jbtnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcmbBranch, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(59, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(180, 180, 180)
                .addComponent(jbtnClear)
                .addContainerGap(193, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jcmbBranch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jbtnClear)
                .addContainerGap(101, Short.MAX_VALUE))
        );

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        jmnuOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jmnuOpen.setMnemonic('O');
        jmnuOpen.setText(resourceMap.getString("jmnuOpen.text")); // NOI18N
        jmnuOpen.setName("jmnuOpen"); // NOI18N
        jmnuOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmnuOpenActionPerformed(evt);
            }
        });
        fileMenu.add(jmnuOpen);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(hbinvent.HBInventApp.class).getContext().getActionMap(HBInventView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        statusPanel.setName("statusPanel"); // NOI18N

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusPanelSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 430, Short.MAX_VALUE)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusMessageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 260, Short.MAX_VALUE)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusAnimationLabel)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addComponent(statusPanelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusMessageLabel)
                    .addComponent(statusAnimationLabel)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3))
        );

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
    }// </editor-fold>//GEN-END:initComponents

    private void jmnuOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmnuOpenActionPerformed
        loading = true;
        String sql = "SELECT * FROM branch ORDER BY Branch_Name"; //Branch_Name from SQL describe branch;
        // build Connection object called conn that will consist of the URL, username & password

        try {
            String dbURL = "jdbc:mysql://localhost:3306/henrybooks";
            String unm = "root";
            String pwd = "sesame";
            Connection conn = DriverManager.getConnection(dbURL,unm,pwd);
            Statement s = conn.createStatement();
            ResultSet r = s.executeQuery(sql);
            r.last();
            statusMessageLabel.setText("Records returned = " + r.getRow());
            r.first();
            do {
                Branch b = new Branch(); //constructor
                //pull data from results set into b (branch object)
                b.setBno(r.getString("Branch_Number"));
                b.setBnm(r.getString("Branch_Name"));
                b.setBloc(r.getString("Branch_Location"));
                b.setBemp(r.getInt("Number_Employees"));
                jcmbBranch.addItem(b);
            } while (r.next());
            conn.close();
            jcmbBranch.setEnabled(true); //allows it to be 
            jcmbBranch.setSelectedIndex(-1); //nothing selected
        } catch (SQLException e) {
            statusMessageLabel.setText("Sql error: " + e.getMessage() + " sql:" + sql);
        } catch (Exception e) {
            statusMessageLabel.setText("Error: " + e.getMessage());
        }
        loading = false;
    }//GEN-LAST:event_jmnuOpenActionPerformed

    private void jcmbBranchItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcmbBranchItemStateChanged
        NumberFormat c = NumberFormat.getCurrencyInstance();
        if (loading) { return;} //prevents the message below when loading table fired event
        //if no branch selected...
        if (jcmbBranch.getSelectedIndex() == -1) { //no branch selected
            statusMessageLabel.setText("No Branch Selected");
            return;
        }
        Branch b = (Branch ) jcmbBranch.getSelectedItem(); //explicit cast as branch object
        String sql = "SELECT * FROM invent, book " +
                     " WHERE invent.book_code = book.book_code AND" +
                     " invent.branch_number = '" + b.getBno() + "'" +
                     " ORDER BY book.book_title";
        try {
            String dbURL = "jdbc:mysql://localhost:3306/henrybooks";
            String unm = "root";
            String pwd = "sesame";
            Connection conn = DriverManager.getConnection(dbURL,unm,pwd);
            Statement s = conn.createStatement();
            ResultSet r = s.executeQuery(sql);
            r.last();
            statusMessageLabel.setText("Books read = " + r.getRow());
            //construct parms of table, pull items from result set to cells in table

                String [] columns = {"Title", "Book Cd", "Publisher", "Price", "On Hand"};
                String[][] rows = new String[r.getRow()][5];
                DefaultTableModel m = new DefaultTableModel(rows,columns);
                jTable1.setModel(m);
                DefaultTableCellRenderer rend = new DefaultTableCellRenderer();
                rend.setHorizontalAlignment(JLabel.RIGHT);
                jTable1.getColumnModel().getColumn(3).setCellRenderer(rend);
                jTable1.getColumnModel().getColumn(4).setCellRenderer(rend);
                jTable1.getColumnModel().getColumn(0).setPreferredWidth(225);

                //fill table
                r.first();
                do {
                    int rw = (r.getRow()-1);
                    jTable1.setValueAt(r.getString("book_title"), rw, 0);
                    jTable1.setValueAt(r.getString("book_code"), rw, 1);
                    jTable1.setValueAt(r.getString("publisher_code"), rw, 2);
                    //jTable1.setValueAt(r.getString("book_price"), rw, 3);
                    //format for currency
                    jTable1.setValueAt(c.format(r.getDouble("book_price")), rw, 3);
                    jTable1.setValueAt(r.getString("Units_on_hand"), rw, 4);

                } while (r.next());
                conn.close();
                
        }catch (SQLException e) {
            statusMessageLabel.setText("SQL Error: " + e.getMessage());
        }catch (Exception e) {
            statusMessageLabel.setText("Error " + e.getMessage());
        }
    }//GEN-LAST:event_jcmbBranchItemStateChanged

        private void jbtnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnClearActionPerformed
            jTable1.setModel(new DefaultTableModel());
            jcmbBranch.removeAllItems();
            jcmbBranch.setEnabled(false);
        }//GEN-LAST:event_jbtnClearActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton jbtnClear;
    private javax.swing.JComboBox jcmbBranch;
    private javax.swing.JMenuItem jmnuOpen;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    // End of variables declaration//GEN-END:variables

    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;

    private JDialog aboutBox;
}
